0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@1.1.49
3 info using node@v0.8.7
4 verbose publish [ '.' ]
5 verbose read json /home/sebastian/Projects/tap.io/package.json
6 verbose cache add [ '.', null ]
7 silly cache add name=undefined spec="." args=[".",null]
8 verbose parsed url { pathname: '.', path: '.', href: '.' }
9 silly lockFile 3a52ce78- .
10 verbose lock . /home/sebastian/.npm/3a52ce78-.lock
11 verbose read json package.json
12 verbose tar pack [ '/home/sebastian/tmp/npm-6412/1366091446922-0.8380443886853755/tmp.tgz',
12 verbose tar pack   '.' ]
13 verbose tarball /home/sebastian/tmp/npm-6412/1366091446922-0.8380443886853755/tmp.tgz
14 verbose folder .
15 info prepublish tap.io@0.0.0-6
16 silly lockFile ff1b3c7f-46922-0-8380443886853755-tmp-tgz /home/sebastian/tmp/npm-6412/1366091446922-0.8380443886853755/tmp.tgz
17 verbose lock /home/sebastian/tmp/npm-6412/1366091446922-0.8380443886853755/tmp.tgz /home/sebastian/.npm/ff1b3c7f-46922-0-8380443886853755-tmp-tgz.lock
18 silly lockFile ff1b3c7f-46922-0-8380443886853755-tmp-tgz /home/sebastian/tmp/npm-6412/1366091446922-0.8380443886853755/tmp.tgz
19 verbose tar unpack /home/sebastian/tmp/npm-6412/1366091446922-0.8380443886853755/tmp.tgz
20 silly lockFile 536dc171-46922-0-8380443886853755-package /home/sebastian/tmp/npm-6412/1366091446922-0.8380443886853755/package
21 verbose lock /home/sebastian/tmp/npm-6412/1366091446922-0.8380443886853755/package /home/sebastian/.npm/536dc171-46922-0-8380443886853755-package.lock
22 silly gunzTarPerm modes [ '777', '666' ]
23 silly gunzTarPerm extractEntry package.json
24 silly gunzTarPerm modified mode [ 'package.json', 436, 438 ]
25 silly gunzTarPerm extractEntry .npmignore
26 silly gunzTarPerm modified mode [ '.npmignore', 436, 438 ]
27 silly gunzTarPerm extractEntry README.md
28 silly gunzTarPerm modified mode [ 'README.md', 436, 438 ]
29 silly gunzTarPerm extractEntry index.js
30 silly gunzTarPerm modified mode [ 'index.js', 436, 438 ]
31 silly gunzTarPerm extractEntry libs/server.js
32 silly gunzTarPerm modified mode [ 'libs/server.js', 436, 438 ]
33 silly gunzTarPerm extractEntry libs/client.js
34 silly gunzTarPerm modified mode [ 'libs/client.js', 436, 438 ]
35 silly gunzTarPerm extractEntry libs/app.js
36 silly gunzTarPerm modified mode [ 'libs/app.js', 436, 438 ]
37 silly gunzTarPerm extractEntry libs/shared.js
38 silly gunzTarPerm modified mode [ 'libs/shared.js', 436, 438 ]
39 silly gunzTarPerm extractEntry tests/utilities-ms2ticks2ms.js
40 silly gunzTarPerm modified mode [ 'tests/utilities-ms2ticks2ms.js', 436, 438 ]
41 silly gunzTarPerm extractEntry tests/0-setup.js
42 silly gunzTarPerm modified mode [ 'tests/0-setup.js', 436, 438 ]
43 silly gunzTarPerm extractEntry tests/engine-handle-tests.js
44 silly gunzTarPerm modified mode [ 'tests/engine-handle-tests.js', 436, 438 ]
45 silly gunzTarPerm extractEntry tests/serializer-tests.js
46 silly gunzTarPerm modified mode [ 'tests/serializer-tests.js', 436, 438 ]
47 silly gunzTarPerm extractEntry tests/engine-safely-advance-tests.js
48 silly gunzTarPerm modified mode [ 'tests/engine-safely-advance-tests.js', 436, 438 ]
49 silly gunzTarPerm extractEntry tests/utilities-splice-out-tests.js
50 silly gunzTarPerm modified mode [ 'tests/utilities-splice-out-tests.js', 436, 438 ]
51 silly gunzTarPerm extractEntry tests/random-tests.js
52 silly gunzTarPerm modified mode [ 'tests/random-tests.js', 436, 438 ]
53 silly gunzTarPerm extractEntry tests/engine-safe-advance-point-tests.js
54 silly gunzTarPerm modified mode [ 'tests/engine-safe-advance-point-tests.js', 436, 438 ]
55 silly gunzTarPerm extractEntry tests/engine-advance-to-tests.js
56 silly gunzTarPerm modified mode [ 'tests/engine-advance-to-tests.js', 436, 438 ]
57 silly gunzTarPerm extractEntry tests/server-game.js
58 silly gunzTarPerm modified mode [ 'tests/server-game.js', 436, 438 ]
59 silly gunzTarPerm extractEntry tests/engine-safe-zone-tests.js
60 silly gunzTarPerm modified mode [ 'tests/engine-safe-zone-tests.js', 436, 438 ]
61 silly gunzTarPerm extractEntry tests/engine-validate-tests.js
62 silly gunzTarPerm modified mode [ 'tests/engine-validate-tests.js', 436, 438 ]
63 silly gunzTarPerm extractEntry tests/reload.js
64 silly gunzTarPerm modified mode [ 'tests/reload.js', 436, 438 ]
65 silly gunzTarPerm extractEntry tests/cloner-tests.js
66 silly gunzTarPerm modified mode [ 'tests/cloner-tests.js', 436, 438 ]
67 silly gunzTarPerm extractEntry tests/server-network.js
68 silly gunzTarPerm modified mode [ 'tests/server-network.js', 436, 438 ]
69 verbose read json /home/sebastian/tmp/npm-6412/1366091446922-0.8380443886853755/package/package.json
70 silly lockFile 536dc171-46922-0-8380443886853755-package /home/sebastian/tmp/npm-6412/1366091446922-0.8380443886853755/package
71 verbose from cache /home/sebastian/tmp/npm-6412/1366091446922-0.8380443886853755/package/package.json
72 verbose tar pack [ '/home/sebastian/.npm/tap.io/0.0.0-6/package.tgz',
72 verbose tar pack   '/home/sebastian/tmp/npm-6412/1366091446922-0.8380443886853755/package' ]
73 verbose tarball /home/sebastian/.npm/tap.io/0.0.0-6/package.tgz
74 verbose folder /home/sebastian/tmp/npm-6412/1366091446922-0.8380443886853755/package
75 silly lockFile 25b682e9-n-npm-tap-io-0-0-0-6-package-tgz /home/sebastian/.npm/tap.io/0.0.0-6/package.tgz
76 verbose lock /home/sebastian/.npm/tap.io/0.0.0-6/package.tgz /home/sebastian/.npm/25b682e9-n-npm-tap-io-0-0-0-6-package-tgz.lock
77 silly lockFile 25b682e9-n-npm-tap-io-0-0-0-6-package-tgz /home/sebastian/.npm/tap.io/0.0.0-6/package.tgz
78 silly lockFile 98508417-stian-npm-tap-io-0-0-0-6-package /home/sebastian/.npm/tap.io/0.0.0-6/package
79 verbose lock /home/sebastian/.npm/tap.io/0.0.0-6/package /home/sebastian/.npm/98508417-stian-npm-tap-io-0-0-0-6-package.lock
80 silly lockFile 98508417-stian-npm-tap-io-0-0-0-6-package /home/sebastian/.npm/tap.io/0.0.0-6/package
81 verbose tar unpack /home/sebastian/.npm/tap.io/0.0.0-6/package.tgz
82 silly lockFile 98508417-stian-npm-tap-io-0-0-0-6-package /home/sebastian/.npm/tap.io/0.0.0-6/package
83 verbose lock /home/sebastian/.npm/tap.io/0.0.0-6/package /home/sebastian/.npm/98508417-stian-npm-tap-io-0-0-0-6-package.lock
84 silly gunzTarPerm modes [ '777', '666' ]
85 silly gunzTarPerm extractEntry package.json
86 silly gunzTarPerm extractEntry .npmignore
87 silly gunzTarPerm extractEntry README.md
88 silly gunzTarPerm extractEntry index.js
89 silly gunzTarPerm extractEntry libs/server.js
90 silly gunzTarPerm extractEntry libs/client.js
91 silly gunzTarPerm extractEntry libs/app.js
92 silly gunzTarPerm extractEntry libs/shared.js
93 silly gunzTarPerm extractEntry tests/utilities-ms2ticks2ms.js
94 silly gunzTarPerm extractEntry tests/0-setup.js
95 silly gunzTarPerm extractEntry tests/engine-handle-tests.js
96 silly gunzTarPerm extractEntry tests/serializer-tests.js
97 silly gunzTarPerm extractEntry tests/engine-safely-advance-tests.js
98 silly gunzTarPerm extractEntry tests/utilities-splice-out-tests.js
99 silly gunzTarPerm extractEntry tests/random-tests.js
100 silly gunzTarPerm extractEntry tests/engine-safe-advance-point-tests.js
101 silly gunzTarPerm extractEntry tests/engine-advance-to-tests.js
102 silly gunzTarPerm extractEntry tests/server-game.js
103 silly gunzTarPerm extractEntry tests/engine-safe-zone-tests.js
104 silly gunzTarPerm extractEntry tests/engine-validate-tests.js
105 silly gunzTarPerm extractEntry tests/reload.js
106 silly gunzTarPerm extractEntry tests/cloner-tests.js
107 silly gunzTarPerm extractEntry tests/server-network.js
108 verbose read json /home/sebastian/.npm/tap.io/0.0.0-6/package/package.json
109 silly lockFile 98508417-stian-npm-tap-io-0-0-0-6-package /home/sebastian/.npm/tap.io/0.0.0-6/package
110 silly shasum updated bytes 17417
111 info shasum c7da5b28f4255bb06dffdc0248cde16026caae32
111 info shasum /home/sebastian/.npm/tap.io/0.0.0-6/package.tgz
112 verbose from cache /home/sebastian/.npm/tap.io/0.0.0-6/package/package.json
113 verbose chmod /home/sebastian/.npm/tap.io/0.0.0-6/package.tgz 666
114 verbose chown /home/sebastian/.npm/tap.io/0.0.0-6/package.tgz [ 1000, 1000 ]
115 silly lockFile 3a52ce78- .
116 silly publish { name: 'tap.io',
116 silly publish   version: '0.0.0-6',
116 silly publish   main: 'tap',
116 silly publish   description: 'A Node.js platform for building distributed real-time systems with client browsers.',
116 silly publish   author: { name: 'Sebastian Goodman' },
116 silly publish   license: 'MIT',
116 silly publish   repository: { type: 'git', url: 'git@github.com/0x0539/tap.io' },
116 silly publish   subdomain: 'bumbleskunk.tap.io',
116 silly publish   scripts: { start: 'example/minimal/app.js' },
116 silly publish   engines: { node: '0.8.x' },
116 silly publish   dependencies: { ejs: '*', 'socket.io': '*' },
116 silly publish   readme: 'News\n====\n10-2012: The example game is live. Head on over to http://bumbleskunk.tap.io.jit.su/\n\nBrowser-based Multiplayer Games with tap.io\n===========================================\n\nPlatform for building browser-based, distributed simulations/games. This is all possible thanks to the recent \nexplosion of innovation in browser technology, including WebSockets, WebGL, and socket.io.\n\nTap.io systems use socket.io for communication. They can use anything (WebGL, canvas, jQuery) to render the game.\n\nRunning the Example\n===================\nAfter cloning the repository, run ```sudo node example/snake/server/server.js```.  Then open up \nhttp://localhost/snake.html in a couple different windows. To use a port other than 80 (the\nreason for sudo), then open up example/snake/server/server.js and change the port there.\n\nWorking with tap.io\n===================\n\nTo get started with tap.io, there is an example game in ```example/snake```. The project is structured into three\nsubdirectories:\n\n1. ```shared```: contains engine code shared by the client and server, the meat of the application\n2. ```client```: contains client-only code, the render javascript and the html file that hosts the game\n3. ```server```: contains server-only code, the socket.io app which also serves client code over http\n\n### Writing an Engine\n\nIn the example game, there is only one shared file, ```shared/snake-engine.js```. It implements all the logic \nof the game. It defines an object called ```SnakeEngine``` that meets a specific engine interface required by the framework.\n\n```\n(window || exports).SnakeEngine = (function(){\n  ...\n})();\n```\n\n**Note:** The ```(window || exports)``` idiom is used to write javascript that can run on \nboth server AND client.  When it executes on a browser, ```window``` exists so ```window.SnakeEngine``` \ngets defined. When it executes in node.js, ```window``` does not exist so ```exports.SnakeEngine``` gets \ndefined. Node.js developers will recognize that the exports object is the standard way to export functionality from a node module.\n\nThe SnakeEngine object exposes three important functions:\n\n1. update(state) function\n2. validate(state, event) function\n3. handle(state, event) function\n\nEvery game must have at least one object that implements these interfaces.\n\n#### Engine.update(state)\n\nThe Engine.update(state) function takes an input/output parameter **state** that is the entire state of the game.\nIt performs an **in-place** update of this state according to the game rules.  Put a different way, \nthe Engine.update(state) function takes an input state and applies one timestep of physics to it.\n\nFor example, if the game has the notion of gravity, the gravity physics would take place in the Engine.update(state) \nfunction. It might look like this\n\n```\nMyEngine.update = function(state){\n  // some stuff...\n\n  // gravity\n  for(var i = 0; i < state.players.length; i++)\n    if(state.players[i].falling == true)\n      state.players[i].y -= 10;\n\n  // more stuff...\n};\n```\n\n**Determinism!** It is crucial that the results of this function be deterministic. For tap.io purposes, deterministic \nmeans that two different clients executing the update function with the same input state should arrive at the \nsame output state.  This does not mean it is impossible for a game to use pseudo-random numbers. An ARC4 RNG is \nincluded in tap.io whose state is folded into the overall game state, allowing clients to generate the same sequence \nof pseudo random numbers deterministically.\n\n#### Engine.handle(state, event)\n\nThe handle function takes an input/output parameter **state** and an **event** to be applied to that state.\nIt performs an **in-place** update of the state according to the nature of the **event**.\n\nFor example, user input is modeled with events. The Engine.handle(state, event) function might contain\nsomething like this:\n\n```\nMyEngine.handle = function(state, event){\n  if(event.type == Events.CUSTOM){\n    switch(event.data.which){\n      case \'keyDown\':\n        state.players[event.data.sessionId].yVelocity += 1;\n        break;\n      case \'keyUp\':\n        state.players[event.data.sessionId].yVelocity -= 1;\n        break;\n    }\n  }\n}\n```\n\nThis function must also be deterministic.\n\nIt\'s important to note the event type when handling it. Standard event types can be found in `lib/shared/constants.js`.\nThe CUSTOM type is used for all custom events.\n\n#### Engine.validate(state, event)\n\nThe validate function should throw an exception if **event** is invalid, given the **state**. This can be used, \nfor example, to prevent users from modifying each others positions by checking to see if\n**event.senderSessionId** (secure field set by the server) matches *event.data.playerId**.\n\nThis function must also be deterministic.\n\n### Writing a Server\n\ntap.io does not provide an executable node.js application, only libraries for networking and graphics. It is up to API\nusers to determine how to serve their game content (HTML, JS, CSS) to clients.\n\nFor an example of such an application, see the server for the snake game in ```server/snake-engine.js```. It is \nessentially a node.js server that hosts client files over http and invokes the tap.io framework. Here are the steps taken (roughly):\n\n```\nvar server = require(\'http\').createServer(function(){ // serve ordinary http requests here });\nserver.listen(80);\n\n// please include this line for safety\nglobal.window = false;\n\n// require framework libraries\nvar Network = require(\'../../../lib/server/network.js\').Network,\n    Game = require(\'../../../lib/server/game.js\').Game,\n    Engine = require(\'../../../lib/shared/engine.js\').Engine,\n    SnakeEngine = require(\'../shared/snake-engine.js\').SnakeEngine; // <-- engine implementation!\n\n// plug in game engine\nEngine.plugins.push(SnakeEngine);\n\n// start the networking\nvar socket = new Network(server);\nsocket.start();\n\n// start the game manager\nvar game = new Game(socket);\n\n// ...\n// initialize game.state here\n// ...\n\n// start the game itself\ngame.start();\n```\n\n### Writing a Client\n\nClients are browsers, and browsers need to see some HTML to get started. That means serving an HTML\npage with some javascript on it to bootstrap the game. The first thing the client needs is the socket.io javascript:\n\n```\n<script type="text/javascript" src="http://your.socket.server/socket.io/socket.io.js"></script>\n```\n\nThe next thing is to include every script under lib/shared *plus* any custom client JS (this includes \nthe shared game engine object discussed earlier).  A few more lines will tie everything together:\n\n```\nwindow.Engine.plugins.push(window.SnakeEngine); // <-- engine implementation\n\nvar socket = window.io.connect(window.location.hostname),\n    game = new window.Game(socket),\n    renderer = new window.SnakeRenderer(), // <-- renderer implementation\n    renderLoop = new window.RenderLoop(game, renderer);\n```\n\nTo send an event such as user input, make the following call:\n\n```\ngame.send(Constants.Events.CUSTOM, { ...data... });\n```\n\nThe second argument to that call, the event data, will be available in the Engine.handle call\nunder event.data.\n\n#### Renderer\n\nTo get the game to actually show up in the browser, a renderer is required.  The interface is an \nobject with a render function.  Here is an example from the snake project:\n\n```\nwindow.SnakeRenderer = (function(){\n\n  var SnakeRenderer = function(){ };\n\n  SnakeRenderer.prototype.render = function(playerSessionId, state){\n    // draw some canvas/webgl\n  };\n\n  return SnakeRenderer;\n  \n})();\n```\n\nThe render() function takes the playerSessionId of the user whose perspective to render and the game state.\n',
116 silly publish   _id: 'tap.io@0.0.0-6',
116 silly publish   dist: { shasum: 'c7da5b28f4255bb06dffdc0248cde16026caae32' } }
117 verbose url raw tap.io
118 verbose url resolving [ 'https://registry.npmjs.org/', './tap.io' ]
119 verbose url resolved https://registry.npmjs.org/tap.io
120 info retry registry request attempt 1 at 22:50:47
121 http PUT https://registry.npmjs.org/tap.io
122 http 409 https://registry.npmjs.org/tap.io
123 verbose url raw tap.io
124 verbose url resolving [ 'https://registry.npmjs.org/', './tap.io' ]
125 verbose url resolved https://registry.npmjs.org/tap.io
126 info retry registry request attempt 1 at 22:50:48
127 http GET https://registry.npmjs.org/tap.io
128 http 200 https://registry.npmjs.org/tap.io
129 error publish fail Cannot publish over existing version.
129 error publish fail Bump the 'version' field, set the --force flag, or
129 error publish fail     npm unpublish 'tap.io@0.0.0-6'
129 error publish fail and try again
130 error System Linux 3.2.0-39-generic
131 error command "/usr/local/bin/node" "/usr/local/bin/npm" "publish"
132 error cwd /home/sebastian/Projects/tap.io
133 error node -v v0.8.7
134 error npm -v 1.1.49
135 error code EPUBLISHCONFLICT
136 verbose exit [ 1, true ]
